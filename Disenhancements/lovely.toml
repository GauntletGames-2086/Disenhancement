[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# From Steamodded
# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for k, v in pairs(SMODS.Disenhancements) do
	G.BADGE_COL[k:lower()..'_disenhancement'] = v.colour
end
'''

# Card:draw()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)self:draw_boundingrect\(\)'''
position = "before"
line_prepend = "$indent"
payload = '''
--asdf
if self.sprite_facing == 'front' then
    for k, v in pairs(SMODS.Disenhancements) do
        if self.ability.disenhancement and self.ability.disenhancement == v.key then
            G.shared_disenhancements[v.key].role.draw_major = self
            G.shared_disenhancements[v.key]:draw_shader('dissolve', nil, nil, nil, self.children.center)
            if v.soul_pos then
                local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
                local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
                G.shared_disenhancements[v.key.."soul_pos"]:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
                G.shared_disenhancements[v.key.."soul_pos"]:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
            end
        end
    end
end
'''

# generate_card_ui()
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "(?<indent>[\t ]*)if v == 'eternal'"
line_prepend = '$indent'
position = 'before'
payload = '''

if SMODS.Disenhancement.reverse_lookup[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end
if SMODS.Disenhancements[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'if self.sticker then loc_vars = loc_vars or {}; loc_vars.sticker=self.sticker end'
position = 'after'
match_indent = true
payload = '''
if self.ability.disenhancement then badges[#badges + 1] = string.lower(self.ability.disenhancement)..'_disenhancement' end
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'perma_bonus = self.ability and self.ability.perma_bonus or 0,'
position = 'after'
match_indent = true
payload = '''
disenhancement = self.ability and self.ability.disenhancement or nil,
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "v.ability.forced_selection = nil"
position = 'at'
match_indent = true
payload = '''if not (v.ability.disenhancement and v.ability.disenhancement == "me_first") then v.ability.forced_selection = nil end'''
